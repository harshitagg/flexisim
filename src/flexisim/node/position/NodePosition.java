/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NodePosition.java
 *
 * Created on Oct 14, 2010, 10:51:34 AM
 */
package flexisim.node.position;

import flexisim.node.NewNode;
import java.text.DecimalFormat;
import flexisim.views.FlexiSimView;
import flexisim.views.NewProject;

/**
 *
 * @author harshit
 */
public class NodePosition extends javax.swing.JDialog {

    Number[] x = new Number[200];
    Number[] y = new Number[200];
    Number[] z = new Number[200];
    double[] xd = new double[200];
    double[] yd = new double[200];
    double[] zd = new double[200];
    boolean[] random = new boolean[200];
    int indexnode = 0;

    /** Creates new form NodePosition */
    public NodePosition(java.awt.Frame parent) {
        super(parent);
        initComponents();
        for (int i = 0; i < 200; i++) {
            xd[i] = NewProject.obnpd.getXp(i);
            yd[i] = NewProject.obnpd.getYp(i);
            zd[i] = NewProject.obnpd.getZp(i);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nodeLabel = new javax.swing.JLabel();
        nodeComboBox = new javax.swing.JComboBox();
        xLabel = new javax.swing.JLabel();
        yLabel = new javax.swing.JLabel();
        zLabel = new javax.swing.JLabel();
        xFormattedTextField = new javax.swing.JFormattedTextField(new DecimalFormat("#.00"));
        yFormattedTextField = new javax.swing.JFormattedTextField(new DecimalFormat("#.00"));
        zFormattedTextField = new javax.swing.JFormattedTextField(new DecimalFormat("#.00"));
        nodePosOkButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        setRandomLocationCheckBox = new javax.swing.JCheckBox();
        setRandomLocationForAllNodesCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(flexisim.views.FlexiSimApp.class).getContext().getResourceMap(NodePosition.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N
        setResizable(false);

        nodeLabel.setText(resourceMap.getString("nodeLabel.text")); // NOI18N
        nodeLabel.setName("nodeLabel"); // NOI18N

        nodeComboBox.setModel(new javax.swing.DefaultComboBoxModel());
        for(int i=0;i<50;i++)
        {
            if(NewProject.obnm.getNodename(i)!=null)
            nodeComboBox.addItem(NewProject.obnm.getNodename(i));
        }
        nodeComboBox.setName("nodeComboBox"); // NOI18N
        nodeComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                nodeComboBoxItemStateChanged(evt);
            }
        });

        xLabel.setText(resourceMap.getString("xLabel.text")); // NOI18N
        xLabel.setName("xLabel"); // NOI18N

        yLabel.setText(resourceMap.getString("yLabel.text")); // NOI18N
        yLabel.setName("yLabel"); // NOI18N

        zLabel.setText(resourceMap.getString("zLabel.text")); // NOI18N
        zLabel.setName("zLabel"); // NOI18N

        xFormattedTextField.setText(resourceMap.getString("xFormattedTextField.text")); // NOI18N
        xFormattedTextField.setName("xFormattedTextField"); // NOI18N
        xFormattedTextField.setValue(NewProject.obnpd.getXp(nodeComboBox.getSelectedIndex()));

        yFormattedTextField.setName("yFormattedTextField"); // NOI18N
        yFormattedTextField.setValue(NewProject.obnpd.getYp(nodeComboBox.getSelectedIndex()));

        zFormattedTextField.setText(resourceMap.getString("zFormattedTextField.text")); // NOI18N
        zFormattedTextField.setName("zFormattedTextField"); // NOI18N
        zFormattedTextField.setValue(NewProject.obnpd.getZp(nodeComboBox.getSelectedIndex()));

        nodePosOkButton.setText(resourceMap.getString("nodePosOkButton.text")); // NOI18N
        nodePosOkButton.setName("nodePosOkButton"); // NOI18N
        nodePosOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodePosOkButtonActionPerformed(evt);
            }
        });

        cancelButton.setText(resourceMap.getString("cancelButton.text")); // NOI18N
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        setRandomLocationCheckBox.setText(resourceMap.getString("setRandomLocationCheckBox.text")); // NOI18N
        setRandomLocationCheckBox.setName("setRandomLocationCheckBox"); // NOI18N
        setRandomLocationCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setRandomLocationCheckBoxActionPerformed(evt);
            }
        });
        if (NewProject.obnpd.getRandom(nodeComboBox.getSelectedIndex())) {
            xFormattedTextField.setValue(xd[nodeComboBox.getSelectedIndex()]);
            yFormattedTextField.setValue(yd[nodeComboBox.getSelectedIndex()]);
            zFormattedTextField.setValue(zd[nodeComboBox.getSelectedIndex()]);
            xFormattedTextField.setEnabled(false);
            yFormattedTextField.setEnabled(false);
            zFormattedTextField.setEnabled(false);
            setRandomLocationCheckBox.setSelected(true);
        }

        setRandomLocationForAllNodesCheckBox.setText(resourceMap.getString("setRandomLocationForAllNodesCheckBox.text")); // NOI18N
        setRandomLocationForAllNodesCheckBox.setName("setRandomLocationForAllNodesCheckBox"); // NOI18N
        setRandomLocationForAllNodesCheckBox.setEnabled(false);
        setRandomLocationForAllNodesCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setRandomLocationForAllNodesCheckBoxActionPerformed(evt);
            }
        });
        if(NewProject.obnpd.isRandomAll()){
            xFormattedTextField.setEnabled(false);
            yFormattedTextField.setEnabled(false);
            zFormattedTextField.setEnabled(false);
            nodeComboBox.setEnabled(false);
            random[nodeComboBox.getSelectedIndex()] = false;
            NewProject.obnmd.setRandomAll(true);
            setRandomLocationForAllNodesCheckBox.setEnabled(true);
            setRandomLocationForAllNodesCheckBox.setSelected(true);
            setRandomLocationCheckBox.setSelected(true);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nodeLabel)
                .addGap(18, 18, 18)
                .addComponent(nodeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(133, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(136, Short.MAX_VALUE)
                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nodePosOkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(yLabel)
                    .addComponent(zLabel)
                    .addComponent(xLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(zFormattedTextField)
                    .addComponent(yFormattedTextField)
                    .addComponent(xFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(95, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(setRandomLocationCheckBox)
                .addContainerGap(110, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(setRandomLocationForAllNodesCheckBox)
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nodeLabel)
                    .addComponent(nodeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(setRandomLocationCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(setRandomLocationForAllNodesCheckBox)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(xLabel)
                    .addComponent(xFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yLabel)
                    .addComponent(yFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(zLabel)
                    .addComponent(zFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nodePosOkButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nodeComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_nodeComboBoxItemStateChanged
        if (!random[indexnode] && !setRandomLocationCheckBox.isSelected()) {
            try {
                x[indexnode] = (Number) xFormattedTextField.getValue();
                xd[indexnode] = x[indexnode].doubleValue();
            } catch (NullPointerException e) {
                xd[indexnode] = 0;
            }
            try {
                y[indexnode] = (Number) yFormattedTextField.getValue();
                yd[indexnode] = y[indexnode].doubleValue();
            } catch (NullPointerException e) {
                yd[indexnode] = 0;
            }
            try {
                z[indexnode] = (Number) zFormattedTextField.getValue();
                zd[indexnode] = z[indexnode].doubleValue();
            } catch (NullPointerException e) {
                zd[indexnode] = 0;
            }
            indexnode = nodeComboBox.getSelectedIndex();
            xFormattedTextField.setValue(xd[indexnode]);
            yFormattedTextField.setValue(yd[indexnode]);
            zFormattedTextField.setValue(zd[indexnode]);
        }
        indexnode = nodeComboBox.getSelectedIndex();
        if (!random[indexnode]) {
            xFormattedTextField.setEnabled(true);
            yFormattedTextField.setEnabled(true);
            zFormattedTextField.setEnabled(true);
            setRandomLocationCheckBox.setSelected(false);
            xFormattedTextField.setValue(xd[indexnode]);
            yFormattedTextField.setValue(yd[indexnode]);
            zFormattedTextField.setValue(zd[indexnode]);
        }
        if (random[indexnode]) {
            xFormattedTextField.setValue(xd[indexnode]);
            yFormattedTextField.setValue(yd[indexnode]);
            zFormattedTextField.setValue(xd[indexnode]);
            xFormattedTextField.setEnabled(false);
            yFormattedTextField.setEnabled(false);
            zFormattedTextField.setEnabled(false);
            setRandomLocationCheckBox.setSelected(true);
        }
    }//GEN-LAST:event_nodeComboBoxItemStateChanged

    private void nodePosOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodePosOkButtonActionPerformed
        // TODO add your handling code here:
        indexnode = nodeComboBox.getSelectedIndex();
        for (int i = 0; i < NewProject.obnm.nodeNum(); i++) {
            NewProject.obnpd.setXp(xd[i], i);
            NewProject.obnpd.setYp(yd[i], i);
            NewProject.obnpd.setZp(zd[i], i);
            NewProject.obnpd.setRandom(random[i], i);
        }
        try {
            x[indexnode] = (Number) xFormattedTextField.getValue();
            NewProject.obnpd.setXp(x[indexnode].doubleValue(), indexnode);
        } catch (NullPointerException e) {
            NewProject.obnpd.setXp(0, indexnode);
        }
        try {
            y[indexnode] = (Number) yFormattedTextField.getValue();
            NewProject.obnpd.setYp(y[indexnode].doubleValue(), indexnode);
        } catch (NullPointerException e) {
            NewProject.obnpd.setYp(0, indexnode);
        }
        try {
            z[indexnode] = (Number) zFormattedTextField.getValue();
            NewProject.obnpd.setZp(z[indexnode].doubleValue(), indexnode);
        } catch (NullPointerException e) {
            NewProject.obnpd.setZp(0, indexnode);
        }
        NewNode.obj.clearNodePosWrite();
        if (!NewProject.obnpd.isRandomAll()) {
            for (int i = 0; i < NewProject.obnm.nodeNum(); i++) {
                NewNode.obj.nodeposwrite(NewProject.obnm.getNodename(i), NewProject.obnpd.getXp(i), NewProject.obnpd.getYp(i), NewProject.obnpd.getZp(i), random[i]);
            }
        } else {
            for (int i = 0; i < NewProject.obnm.nodeNum(); i++) {
                NewNode.obj.nodeposwrite(NewProject.obnm.getNodename(i), 0, 0, 0, true);
            }
        }
        FlexiSimView.nodeMovementMenuItem.setEnabled(true);
        FlexiSimView.statusTabbedPane.setSelectedIndex(0);
        FlexiSimView.statusTextArea.append("Node Positions Set Successful.\n");
        NewProject.obpd.setLog("Node Positions Set Successful.\n");
        FlexiSimView.codeTextAreaWrite();
        dispose();
    }//GEN-LAST:event_nodePosOkButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void setRandomLocationCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setRandomLocationCheckBoxActionPerformed
        if (setRandomLocationCheckBox.isSelected()) {
            random[nodeComboBox.getSelectedIndex()] = true;
            xFormattedTextField.setEnabled(false);
            yFormattedTextField.setEnabled(false);
            zFormattedTextField.setEnabled(false);
            setRandomLocationForAllNodesCheckBox.setEnabled(true);
            if (setRandomLocationForAllNodesCheckBox.isSelected()) {
                nodeComboBox.setEnabled(false);
                NewProject.obnpd.setRandomAll(true);
                random[nodeComboBox.getSelectedIndex()] = false;
            }
        } else {
            random[nodeComboBox.getSelectedIndex()] = false;
            xFormattedTextField.setEnabled(true);
            yFormattedTextField.setEnabled(true);
            zFormattedTextField.setEnabled(true);
            setRandomLocationForAllNodesCheckBox.setEnabled(false);
            nodeComboBox.setEnabled(true);
            NewProject.obnpd.setRandomAll(false);
        }
    }//GEN-LAST:event_setRandomLocationCheckBoxActionPerformed

    private void setRandomLocationForAllNodesCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setRandomLocationForAllNodesCheckBoxActionPerformed
        if (setRandomLocationForAllNodesCheckBox.isSelected()) {
            nodeComboBox.setEnabled(false);
            random[nodeComboBox.getSelectedIndex()] = false;
            NewProject.obnpd.setRandomAll(true);
        } else {
            nodeComboBox.setEnabled(true);
            random[nodeComboBox.getSelectedIndex()] = true;
            NewProject.obnpd.setRandomAll(false);
        }
    }//GEN-LAST:event_setRandomLocationForAllNodesCheckBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                NodePosition dialog = new NodePosition(new javax.swing.JFrame());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox nodeComboBox;
    private javax.swing.JLabel nodeLabel;
    private javax.swing.JButton nodePosOkButton;
    private javax.swing.JCheckBox setRandomLocationCheckBox;
    private javax.swing.JCheckBox setRandomLocationForAllNodesCheckBox;
    private javax.swing.JFormattedTextField xFormattedTextField;
    private javax.swing.JLabel xLabel;
    private javax.swing.JFormattedTextField yFormattedTextField;
    private javax.swing.JLabel yLabel;
    private javax.swing.JFormattedTextField zFormattedTextField;
    private javax.swing.JLabel zLabel;
    // End of variables declaration//GEN-END:variables
}
