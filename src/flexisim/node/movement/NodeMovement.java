/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NodeMovement.java
 *
 * Created on Oct 14, 2010, 4:13:22 PM
 */
package flexisim.node.movement;

import flexisim.node.NewNode;
import java.text.DecimalFormat;
import flexisim.views.FlexiSimView;
import flexisim.views.NewProject;

/**
 *
 * @author harshit
 */
public class NodeMovement extends javax.swing.JDialog {

    private Number[] x = new Number[200];
    private Number[] y = new Number[200];
    private Number[] time = new Number[200];
    private Number[] speed = new Number[200];
    private double[] xd = new double[200];
    private double[] yd = new double[200];
    private double[] timed = new double[200];
    private double[] speedd = new double[200];
    private boolean[] random = new boolean[200];
    private int indexnode = 0;

    /** Creates new form NodeMovement */
    public NodeMovement(java.awt.Frame parent) {
        super(parent);
        initComponents();
        for (int i = 0; i < NewProject.obnm.nodeNum(); i++) {
            xd[i] = NewProject.obnmd.getXp(i);
            yd[i] = NewProject.obnmd.getYp(i);
            timed[i] = NewProject.obnmd.getTimep(i);
            speedd[i] = NewProject.obnmd.getSpeedp(i);
            random[i] = NewProject.obnmd.getRandomp(i);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nodeLabel = new javax.swing.JLabel();
        nodeComboBox = new javax.swing.JComboBox();
        timeLabel = new javax.swing.JLabel();
        timeFormattedTextField = new javax.swing.JFormattedTextField(new DecimalFormat("#.00"));
        destinationLabel = new javax.swing.JLabel();
        xLabel = new javax.swing.JLabel();
        xFormattedTextField = new javax.swing.JFormattedTextField(new DecimalFormat("#.00"));
        yLabel = new javax.swing.JLabel();
        yFormattedTextField = new javax.swing.JFormattedTextField(new DecimalFormat("#.00"));
        speedLabel = new javax.swing.JLabel();
        speedFormattedTextField = new javax.swing.JFormattedTextField(new DecimalFormat("#.00"));
        jLabel1 = new javax.swing.JLabel();
        nodeMovementOkButton = new javax.swing.JButton();
        randomMotionCheckBox = new javax.swing.JCheckBox();
        cancelButton = new javax.swing.JButton();
        randMotionForAllCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(flexisim.views.FlexiSimApp.class).getContext().getResourceMap(NodeMovement.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N
        setResizable(false);

        nodeLabel.setText(resourceMap.getString("nodeLabel.text")); // NOI18N
        nodeLabel.setName("nodeLabel"); // NOI18N

        nodeComboBox.setModel(new javax.swing.DefaultComboBoxModel());
        for(int i=0;i<50;i++)
        {
            if(NewProject.obnm.getNodename(i)!=null)
            nodeComboBox.addItem(NewProject.obnm.getNodename(i));
        }
        nodeComboBox.setName("nodeComboBox"); // NOI18N
        nodeComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                nodeComboBoxItemStateChanged(evt);
            }
        });

        timeLabel.setText(resourceMap.getString("timeLabel.text")); // NOI18N
        timeLabel.setName("timeLabel"); // NOI18N

        timeFormattedTextField.setText(resourceMap.getString("timeFormattedTextField.text")); // NOI18N
        timeFormattedTextField.setName("timeFormattedTextField"); // NOI18N
        timeFormattedTextField.setValue(NewProject.obnmd.getTimep(nodeComboBox.getSelectedIndex()));

        destinationLabel.setText(resourceMap.getString("destinationLabel.text")); // NOI18N
        destinationLabel.setName("destinationLabel"); // NOI18N

        xLabel.setText(resourceMap.getString("xLabel.text")); // NOI18N
        xLabel.setName("xLabel"); // NOI18N

        xFormattedTextField.setText(resourceMap.getString("xFormattedTextField.text")); // NOI18N
        xFormattedTextField.setName("xFormattedTextField"); // NOI18N
        xFormattedTextField.setValue(NewProject.obnmd.getXp(nodeComboBox.getSelectedIndex()));

        yLabel.setText(resourceMap.getString("yLabel.text")); // NOI18N
        yLabel.setName("yLabel"); // NOI18N

        yFormattedTextField.setText(resourceMap.getString("yFormattedTextField.text")); // NOI18N
        yFormattedTextField.setName("yFormattedTextField"); // NOI18N
        yFormattedTextField.setValue(NewProject.obnmd.getYp(nodeComboBox.getSelectedIndex()));

        speedLabel.setText(resourceMap.getString("speedLabel.text")); // NOI18N
        speedLabel.setName("speedLabel"); // NOI18N

        speedFormattedTextField.setText(resourceMap.getString("speedFormattedTextField.text")); // NOI18N
        speedFormattedTextField.setName("speedFormattedTextField"); // NOI18N
        speedFormattedTextField.setValue(NewProject.obnmd.getSpeedp(nodeComboBox.getSelectedIndex()));

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        nodeMovementOkButton.setText(resourceMap.getString("nodeMovementOkButton.text")); // NOI18N
        nodeMovementOkButton.setName("nodeMovementOkButton"); // NOI18N
        nodeMovementOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodeMovementOkButtonActionPerformed(evt);
            }
        });

        randomMotionCheckBox.setText(resourceMap.getString("randomMotionCheckBox.text")); // NOI18N
        randomMotionCheckBox.setName("randomMotionCheckBox"); // NOI18N
        randomMotionCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomMotionCheckBoxActionPerformed(evt);
            }
        });
        if (NewProject.obnmd.getRandomp(nodeComboBox.getSelectedIndex())) {
            xFormattedTextField.setValue(xd[nodeComboBox.getSelectedIndex()]);
            yFormattedTextField.setValue(yd[nodeComboBox.getSelectedIndex()]);
            timeFormattedTextField.setValue(timed[nodeComboBox.getSelectedIndex()]);
            speedFormattedTextField.setValue(speedd[nodeComboBox.getSelectedIndex()]);
            timeFormattedTextField.setEnabled(false);
            xFormattedTextField.setEnabled(false);
            yFormattedTextField.setEnabled(false);
            speedFormattedTextField.setEnabled(false);
            randomMotionCheckBox.setSelected(true);
        }

        cancelButton.setText(resourceMap.getString("cancelButton.text")); // NOI18N
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        randMotionForAllCheckBox.setText(resourceMap.getString("randMotionForAllCheckBox.text")); // NOI18N
        randMotionForAllCheckBox.setName("randMotionForAllCheckBox"); // NOI18N
        randMotionForAllCheckBox.setEnabled(false);
        randMotionForAllCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randMotionForAllCheckBoxActionPerformed(evt);
            }
        });
        if(NewProject.obnmd.isRandomAll()){timeFormattedTextField.setEnabled(false);
            xFormattedTextField.setEnabled(false);
            yFormattedTextField.setEnabled(false);
            speedFormattedTextField.setEnabled(false);
            nodeComboBox.setEnabled(false);
            random[nodeComboBox.getSelectedIndex()] = false;
            NewProject.obnmd.setRandomAll(true);
            randMotionForAllCheckBox.setEnabled(true);
            randMotionForAllCheckBox.setSelected(true);
            randomMotionCheckBox.setSelected(true);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nodeLabel)
                        .addGap(18, 18, 18)
                        .addComponent(nodeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(182, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nodeMovementOkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(randomMotionCheckBox)
                        .addContainerGap(129, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(randMotionForAllCheckBox)
                        .addContainerGap(45, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(timeLabel)
                                .addGap(18, 18, 18)
                                .addComponent(timeFormattedTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(xLabel)
                                    .addComponent(destinationLabel)
                                    .addComponent(yLabel))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(yFormattedTextField)
                                    .addComponent(xFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(speedLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(speedFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2)
                                .addComponent(jLabel1)))
                        .addGap(117, 117, 117))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nodeLabel)
                    .addComponent(nodeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(randomMotionCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(randMotionForAllCheckBox)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeLabel)
                    .addComponent(timeFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(destinationLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(xLabel)
                    .addComponent(xFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yLabel)
                    .addComponent(yFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(speedLabel)
                    .addComponent(speedFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nodeMovementOkButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nodeComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_nodeComboBoxItemStateChanged
        // TODO add your handling code here:
        if (!random[indexnode] && !randomMotionCheckBox.isSelected()) {
            try {
                x[indexnode] = (Number) xFormattedTextField.getValue();
                xd[indexnode] = x[indexnode].doubleValue();
            } catch (NullPointerException e) {
                xd[indexnode] = 0;
            }
            try {
                y[indexnode] = (Number) yFormattedTextField.getValue();
                yd[indexnode] = y[indexnode].doubleValue();
            } catch (NullPointerException e) {
                yd[indexnode] = 0;
            }
            try {
                time[indexnode] = (Number) timeFormattedTextField.getValue();
                timed[indexnode] = time[indexnode].doubleValue();
            } catch (NullPointerException e) {
                timed[indexnode] = 0;
            }
            try {
                speed[indexnode] = (Number) speedFormattedTextField.getValue();
                speedd[indexnode] = speed[indexnode].doubleValue();
            } catch (NullPointerException e) {
                speedd[indexnode] = 0;
            }
            indexnode = nodeComboBox.getSelectedIndex();
            xFormattedTextField.setValue(xd[indexnode]);
            yFormattedTextField.setValue(yd[indexnode]);
            timeFormattedTextField.setValue(timed[indexnode]);
            speedFormattedTextField.setValue(speedd[indexnode]);
        }
        indexnode = nodeComboBox.getSelectedIndex();
        if (!random[indexnode]) {
            timeFormattedTextField.setEnabled(true);
            xFormattedTextField.setEnabled(true);
            yFormattedTextField.setEnabled(true);
            speedFormattedTextField.setEnabled(true);
            randomMotionCheckBox.setSelected(false);
            xFormattedTextField.setValue(xd[indexnode]);
            yFormattedTextField.setValue(yd[indexnode]);
            timeFormattedTextField.setValue(timed[indexnode]);
            speedFormattedTextField.setValue(speedd[indexnode]);
        }
        if (random[indexnode]) {
            xFormattedTextField.setValue(xd[indexnode]);
            yFormattedTextField.setValue(yd[indexnode]);
            timeFormattedTextField.setValue(timed[indexnode]);
            speedFormattedTextField.setValue(speedd[indexnode]);
            timeFormattedTextField.setEnabled(false);
            xFormattedTextField.setEnabled(false);
            yFormattedTextField.setEnabled(false);
            speedFormattedTextField.setEnabled(false);
            randomMotionCheckBox.setSelected(true);
        }
    }//GEN-LAST:event_nodeComboBoxItemStateChanged

    private void nodeMovementOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodeMovementOkButtonActionPerformed
        // TODO add your handling code here:
        for (int i = 0; i < NewProject.obnm.nodeNum(); i++) {
            NewProject.obnmd.setXp(xd[i], i);
            NewProject.obnmd.setYp(yd[i], i);
            NewProject.obnmd.setTimep(timed[i], i);
            NewProject.obnmd.setSpeedp(speedd[i], i);
            NewProject.obnmd.setRandomp(random[i], i);
        }
        indexnode = nodeComboBox.getSelectedIndex();
        if (!random[indexnode]) {
            try {
                x[indexnode] = (Number) xFormattedTextField.getValue();
                NewProject.obnmd.setXp(x[indexnode].doubleValue(), indexnode);
            } catch (NullPointerException e) {
                NewProject.obnmd.setXp(0, indexnode);
            }
            try {
                y[indexnode] = (Number) yFormattedTextField.getValue();
                NewProject.obnmd.setYp(y[indexnode].doubleValue(), indexnode);
            } catch (NullPointerException e) {
                NewProject.obnmd.setYp(0, indexnode);
            }
            try {
                time[indexnode] = (Number) timeFormattedTextField.getValue();
                NewProject.obnmd.setTimep(time[indexnode].doubleValue(), indexnode);
            } catch (NullPointerException e) {
                NewProject.obnmd.setTimep(0, indexnode);
            }
            try {
                speed[indexnode] = (Number) speedFormattedTextField.getValue();
                NewProject.obnmd.setSpeedp(speed[indexnode].doubleValue(), indexnode);
            } catch (NullPointerException e) {
                NewProject.obnmd.setSpeedp(0, indexnode);
            }
        }
        NewNode.obj.clearNodeMovWrite();
        for (int i = 0; i < NewProject.obnm.nodeNum(); i++) {
            if (NewProject.obnmd.getSpeedp(i) > 0 && !random[i]) {
                NewNode.obj.nodemovwrite(NewProject.obnm.getNodename(i), NewProject.obnmd.getXp(i), NewProject.obnmd.getYp(i), NewProject.obnmd.getTimep(i), NewProject.obnmd.getSpeedp(i), false, false);
            } else if (NewProject.obnmd.getRandomp(i)) {
                NewNode.obj.nodemovwrite(NewProject.obnm.getNodename(i), 0, 0, 0, 0, true, false);
            }
        }
        if (NewProject.obnmd.isRandomAll()) {
            for (int i = 0; i < NewProject.obnm.nodeNum(); i++) {
                NewNode.obj.nodemovwrite(NewProject.obnm.getNodename(i), 0, 0, 0, 0, false, true);
            }
        }
        FlexiSimView.statusTabbedPane.setSelectedIndex(0);
        FlexiSimView.statusTextArea.append("Node Movements Set Successful.\n");
        FlexiSimView.codeTextAreaWrite();
        dispose();
    }//GEN-LAST:event_nodeMovementOkButtonActionPerformed

    private void randomMotionCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomMotionCheckBoxActionPerformed
        // TODO add your handling code here:
        if (randomMotionCheckBox.isSelected()) {
            NewProject.obnmd.setRandomAll(false);
            random[nodeComboBox.getSelectedIndex()] = true;
            timeFormattedTextField.setEnabled(false);
            xFormattedTextField.setEnabled(false);
            yFormattedTextField.setEnabled(false);
            speedFormattedTextField.setEnabled(false);
            randMotionForAllCheckBox.setEnabled(true);
            if (randMotionForAllCheckBox.isSelected()) {
                nodeComboBox.setEnabled(false);
                random[nodeComboBox.getSelectedIndex()] = false;
                NewProject.obnmd.setRandomAll(true);
            }
        } else {
            random[nodeComboBox.getSelectedIndex()] = false;
            timeFormattedTextField.setEnabled(true);
            xFormattedTextField.setEnabled(true);
            yFormattedTextField.setEnabled(true);
            speedFormattedTextField.setEnabled(true);
            randMotionForAllCheckBox.setEnabled(false);
            nodeComboBox.setEnabled(true);
            NewProject.obnmd.setRandomAll(false);
        }
    }//GEN-LAST:event_randomMotionCheckBoxActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void randMotionForAllCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randMotionForAllCheckBoxActionPerformed
        if (randMotionForAllCheckBox.isSelected()) {
            timeFormattedTextField.setEnabled(false);
            xFormattedTextField.setEnabled(false);
            yFormattedTextField.setEnabled(false);
            speedFormattedTextField.setEnabled(false);
            nodeComboBox.setEnabled(false);
            random[nodeComboBox.getSelectedIndex()] = false;
            NewProject.obnmd.setRandomAll(true);
        } else {
            timeFormattedTextField.setEnabled(true);
            xFormattedTextField.setEnabled(true);
            yFormattedTextField.setEnabled(true);
            speedFormattedTextField.setEnabled(true);
            nodeComboBox.setEnabled(true);
            NewProject.obnmd.setRandomAll(false);
        }

    }//GEN-LAST:event_randMotionForAllCheckBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                NodeMovement dialog = new NodeMovement(new javax.swing.JFrame());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel destinationLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JComboBox nodeComboBox;
    private javax.swing.JLabel nodeLabel;
    private javax.swing.JButton nodeMovementOkButton;
    private javax.swing.JCheckBox randMotionForAllCheckBox;
    private javax.swing.JCheckBox randomMotionCheckBox;
    private javax.swing.JFormattedTextField speedFormattedTextField;
    private javax.swing.JLabel speedLabel;
    private javax.swing.JFormattedTextField timeFormattedTextField;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JFormattedTextField xFormattedTextField;
    private javax.swing.JLabel xLabel;
    private javax.swing.JFormattedTextField yFormattedTextField;
    private javax.swing.JLabel yLabel;
    // End of variables declaration//GEN-END:variables
}
